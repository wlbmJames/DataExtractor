<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ALLOW_MULTIPLE_TABLES_ON_PAGE" xml:space="preserve">
    <value>More Than One Table On Page</value>
  </data>
  <data name="ALLOW_MULTIPLE_TABLES_ON_PAGE_DESCRIPTION" xml:space="preserve">
    <value>Allows cases when several table instances occurs within one page.</value>
  </data>
  <data name="CATEGORY_BASIC" xml:space="preserve">
    <value>Basic Properties</value>
  </data>
  <data name="END_PAGE" xml:space="preserve">
    <value>End Page</value>
  </data>
  <data name="END_PAGE_DESCRIPTION" xml:space="preserve">
    <value>Page index where multipage table ends.
-1 - last page of a document.</value>
  </data>
  <data name="EXTRA_COLUMNS_SPLIT" xml:space="preserve">
    <value>Enable Extra Column Split</value>
  </data>
  <data name="EXTRA_COLUMNS_SPLIT_DESCRIPTION" xml:space="preserve">
    <value>Enables extra column split for cases, when header has no enought white gape, but table data has.</value>
  </data>
  <data name="EXTRA_COLUMNS_SPLIT_INDICES" xml:space="preserve">
    <value>Extra Columns Split Indices</value>
  </data>
  <data name="EXTRA_COLUMNS_SPLIT_INDICES_DESCRIPTION" xml:space="preserve">
    <value>Indices of table columns that needs to be extra splitted.</value>
  </data>
  <data name="FILTRATION_RULES" xml:space="preserve">
    <value>Filtration Rule(s)</value>
  </data>
  <data name="FILTRATION_RULES_DESCRIPTION" xml:space="preserve">
    <value>Regular expression based rules, specifying lines dropped out of the table.</value>
  </data>
  <data name="FOOTER_RULE" xml:space="preserve">
    <value>Footer Rule(s)</value>
  </data>
  <data name="FOOTER_RULE_DESCRIPTION" xml:space="preserve">
    <value>Regular expression based rule, specifying first line of page footer that sould be dropped out.</value>
  </data>
  <data name="HEADER_RULES" xml:space="preserve">
    <value>Header Search Rule(s)</value>
  </data>
  <data name="HEADER_RULES_DESCRIPTION" xml:space="preserve">
    <value>A set of regular expression set of rules, specifying search table header string(s).</value>
  </data>
  <data name="MASTER_COLUMN_CELL_ALIGNMENT" xml:space="preserve">
    <value>Master Column Cell Alignment</value>
  </data>
  <data name="MASTER_COLUMN_CELL_ALIGNMENT_DESCRIPTION" xml:space="preserve">
    <value>Vertical content alignment in master column cells.</value>
  </data>
  <data name="MASTER_COLUMN_INDEX" xml:space="preserve">
    <value>Master Column Index</value>
  </data>
  <data name="MASTER_COLUMN_INDEX_DESCRIPTION" xml:space="preserve">
    <value>1-based index of table column, that identify number of rows in table.</value>
  </data>
  <data name="MAX_STRINGS_COUNT" xml:space="preserve">
    <value>Rows are equal to strings count</value>
  </data>
  <data name="MIN_WHITE_GAPE_FACTOR" xml:space="preserve">
    <value>Minimum White Gape Factor</value>
  </data>
  <data name="MIN_WHITE_GAPE_FACTOR_DESCRIPTION" xml:space="preserve">
    <value>Minimum white space factor that needs to be preserved on table text analysis to split into columns.
Gape is set as multiply to average symbol width of an analyzed string.</value>
  </data>
  <data name="MULTIPAGE_TABLE" xml:space="preserve">
    <value>Multipage Table</value>
  </data>
  <data name="MULTIPAGE_TABLE_DESCRIPTION" xml:space="preserve">
    <value>Set this option means that table can start on one page of document and continues on other pages.</value>
  </data>
  <data name="PROHIBIT_UNNAMED_COLUMNS" xml:space="preserve">
    <value>Prohibit Unnamed Columns</value>
  </data>
  <data name="PROHIBIT_UNNAMED_COLUMNS_DESCRIPTION" xml:space="preserve">
    <value>Prohibit table analysis from making columns with no header text.</value>
  </data>
  <data name="ROWS_SPLIT_RULE" xml:space="preserve">
    <value>Rows Split Rule</value>
  </data>
  <data name="ROWS_SPLIT_RULE_DESCRIPTION" xml:space="preserve">
    <value>Option that specify how table data should be split to rows.</value>
  </data>
  <data name="START_PAGE" xml:space="preserve">
    <value>Start Page</value>
  </data>
  <data name="START_PAGE_DESCRIPTION" xml:space="preserve">
    <value>Page index where multipage table started.</value>
  </data>
  <data name="STOP_RULE" xml:space="preserve">
    <value>Stop Line Rule</value>
  </data>
  <data name="STOP_RULE_DESCRIPTION" xml:space="preserve">
    <value>Regular expression based rule, specifying first line below the table.</value>
  </data>
  <data name="TABLE_SEARCH_SETTINGS" xml:space="preserve">
    <value>Table Search Settings</value>
  </data>
  <data name="UNNAMED_COLUMNS_MERGE_DIRECTION" xml:space="preserve">
    <value>Unnamed Columns Join Direction</value>
  </data>
  <data name="UNNAMED_COLUMNS_MERGE_DIRECTION_DESCRIPTION" xml:space="preserve">
    <value>Direction to which unnamed columns (when found) will be joined to.</value>
  </data>
</root>